name: Build

on:
  push:
  pull_request:

jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.8-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.8-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: python -m pip install -U jupyterlab~=3.0 jupyter_packaging~=0.9 check-manifest
      - name: Build the extension
        run: |
          set -eux
          jlpm
          jlpm run eslint:check
          python -m pip install .

          jupyter labextension list 2>&1 | grep -ie "jupyterlab_autosave_on_focus_change.*OK"
          python -m jupyterlab.browser_check

          check-manifest -v

          pip install build
          python -m build --sdist
          cp dist/*.tar.gz jupyterlab_autosave_on_focus_change.tar.gz
          pip uninstall -y jupyterlab_autosave_on_focus_change jupyterlab
          rm -rf jupyterlab_autosave_on_focus_change

      - uses: actions/upload-artifact@v2
        with:
          name: jupyterlab_autosave_on_focus_change-sdist
          path: jupyterlab_autosave_on_focus_change.tar.gz

  test_isolated:
    name: Test isolated
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
        architecture: 'x64'
    - uses: actions/download-artifact@v2
      with:
        name: jupyterlab_autosave_on_focus_change-sdist
    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)
        pip install jupyterlab_autosave_on_focus_change.tar.gz
        pip install jupyterlab
        jupyter labextension list 2>&1 | grep -ie "jupyterlab_autosave_on_focus_change.*OK"
        python -m jupyterlab.browser_check --no-chrome-test

  deploy:
    name: Upload new version to PyPi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    needs: [test_isolated]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.8-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.8-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: python -m pip install -U build

      - name: Build dist
        run: python -m build -s -w .

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
